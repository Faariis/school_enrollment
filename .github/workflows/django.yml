name: Django CI

on:
  # any code pushed to master and develop branch will be a trigger
  push:
    branches: [ "learning-1"  ]
  # any code pushed to master and develop branch will also be a trigger
  pull_request:
    branches: [ "main"]

jobs:
  mariadb-clean:
    runs-on: self-hosted
    environment: my_env_ci_cid

    steps:
    - name: Check user and pwd - will not show name
      run: |
          pwd
          echo "Current - user : $USER. Not /etc/sudoers changed !requiretty"
    - name: Stop process and start
      run: |
          # Kill process
          # sudo kill -9 `pgrep -x mariadbd`
          # Stop the process
          sudo systemctl stop mariadb
          # Restart process
          sudo systemctl restart mariadb
          sudo systemctl status mariadb
    - name: Create user if not exist
      env:
        ROOT_PASS:     ${{ secrets.ROOT_PASS }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_PASS: ${{ secrets.DATABASE_PASS }}

      run: |
          echo "create user if not exists '$DATABASE_USER' identified by '$DATABASE_PASS'"| sudo mariadb -uroot -p$ROOT_PASS
  
    - name: Add grants for user
      env:
        ROOT_PASS:     ${{ secrets.ROOT_PASS }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_TEST_NAME: ${{ secrets.DATABASE_TEST_NAME }}
      run: |
          # Add grants to database and test_database
          echo "grant all privileges on $DATABASE_NAME.* to $DATABASE_USER@localhost" | sudo mariadb -uroot -p$ROOT_PASS
          echo "grant all privileges on $DATABASE_TEST_NAME.* to $DATABASE_USER@localhost" | sudo mariadb -uroot -p$ROOT_PASS
    - name: Recreate database
      env:
        ROOT_PASS:     ${{ secrets.ROOT_PASS }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_TEST_NAME: ${{ secrets.DATABASE_TEST_NAME }}
      run: |
          # Recreate database
          echo "drop database if exists $DATABASE_NAME; create database $DATABASE_NAME; use $DATABASE_NAME" |sudo mariadb -uroot -p$ROOT_PASS
  build:
    runs-on: self-hosted
    needs: mariadb-clean
    environment: my_env_ci_cid
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6.9]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Retrieve the secrets and decode it to a file
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
        DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_PASS: ${{ secrets.DATABASE_PASS }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
        DATABASE_TEST_NAME: ${{ secrets.DATABASE_TEST_NAME }}
      run: |
          touch .server_env
          echo "export SECRET_KEY="$SECRET_KEY >>.server_env
          echo "export DJANGO_DEBUG="$DJANGO_DEBUG >>.server_env
          echo "export DJANGO_ALLOWED_HOSTS="$DJANGO_ALLOWED_HOSTS >>.server_env
          echo "export DATABASE_NAME="$DATABASE_NAME >>.server_env
          echo "export DATABASE_USER="$DATABASE_USER >>.server_env
          echo "export DATABASE_PASS="$DATABASE_PASS >>.server_env
          echo "export DATABASE_HOST="$DATABASE_HOST >>.server_env
          echo "export DATABASE_TEST_NAME= $DATABASE_TEST_NAME >> .server_env"
          echo "export JWT_PRIVATE_KEY="$JWT_PRIVATE_KEY >>.server_env
          echo "Value from secet", $DJANGO_DEBUG
    - name: Install Dependencies
      run: |
        # I couldn't update packages here because of sudo
        # It is done manually, updated python3 and pip3 and python3.8-venv
        # Note server is bionic and system installation version 3.6.9 cannot be changed to 3.8.10,
        # so instead we are goint to use virtualenv that is installed with manually built binary 3.8.10
        # python3 -m venv env # this will not work on bionic
        virtualenv -p="/usr/local/bin/python3.8" env
        . env/bin/activate # activate virtual env
        pwd
        ls -la
        python3 -m pip install -r requirements.txt
        # Load enviornment variables
        source .server_env
        # Create static folder, so nginx could serve for /admin page
        cd myEnrollment
        ls -la
        # It will execute part related to github actions in settings. 
        # New secerts GITHUB_ related are needed.
        # It can be done in systemd scripts.
        python manage.py collectstatic
        # Remove migration and load data
        python manage.py resetmigrations
        python manage.py makemigrations
        python manage.py migrate
        python manage.py initdata
   # - name: Run Tests
   #   run: |
   #     python manage.py test
